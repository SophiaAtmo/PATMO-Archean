#!/usr/bin/env python3
import glob, shutil, os

os.chdir(".")

hasrm = False

# Remove using a list of dictionaries
# Every list item is a dictionary with:
#   path: folder path
#   fileType: extension to consider, e.g. ".html"
def remover(paths):
    hasrm_local = False
    for pp in paths:
        for root, dirs, files in os.walk(pp["path"]):
            path = root
            if not path.endswith("/"):
                path += "/"
            for x in files:
                if not x.endswith(pp["fileType"]):
                    continue
                print("removing ./" + path + x)
                os.remove(path + x)
                hasrm_local = True
    return hasrm_local


# Remove temp files (~ or .pyc) from subfolders
for root, dirnames, filenames in os.walk('.'):
    for fle in filenames:
        remove = False
        for ty in [".pyc"]:
            if fle.endswith(ty):
                remove = True
                break
        if fle.endswith("~") or remove:
            fname = os.path.join(root, fle)
            os.unlink(fname)
            print("removing ./" + fname)
            hasrm = True

hasrm = remover([
    {"path": "./reports/xsecs", "fileType": ".dat"},
    {"path": "./htmlDocs/rateReversePNGs", "fileType": ".png"},
    {"path": "./htmlDocs", "fileType": ".html"},
    {"path": "./htmlDocs/ratePNGs", "fileType": ".png"},
]) or hasrm
# Uncomment the following entries if needed
# {"path":"./htmlDocs/htmlSpecies/pngs/", "fileType":".png"},
# {"path":"./htmlDocs/htmlRates/pngs/", "fileType":".png"},
# {"path":"./htmlDocs/htmlTopology", "fileType":".html"},
# {"path":"./htmlDocs/htmlTopology/pngs/", "fileType":".png"},
# {"path":"./htmlDocs/htmlDust", "fileType":".html"},
# {"path":"./htmlDocs/htmlDust/pngs/", "fileType":".png"},
# {"path":"./reports/", "fileType":".log"},
# {"path":"./graph/", "fileType":".dot"},
# {"path":"./graph/", "fileType":".eps"},
# {"path":"./dust/tmp/", "fileType":".tmp"},
# {"path":"./options/", "fileType":".opt"}


# Clear build (files)
for root, dirs, files in os.walk("./build/"):
    path = root
    if not path.endswith("/"):
        path += "/"
    for x in files:
        print("removing ./" + path + x)
        os.remove(path + x)
        hasrm = True

# Clear build (dirs)
for root, dirs, files in os.walk("./build/"):
    path = root
    if not path.endswith("/"):
        path += "/"
    for x in dirs:
        print("removing ./" + path + x)
        shutil.rmtree(path + x)
        hasrm = True

# Add README file in build if not present
fname = "build/README"
if not os.path.isfile(fname):
    print("adding README in ./build")
    with open(fname, "w") as fout:
        fout.write("this folder will contain the built files\n")

if not hasrm:
    print("nothing to clean")
print("done!")
